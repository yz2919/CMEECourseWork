Starting weekly assessment for Yuqing, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.61 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, Week3_RCoursework, .git

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.pdf
*.pyc
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository
Do I like this better?
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3_RCoursework

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3_RCOURSEWORK...

Found the following directories: code, data, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
Week3 RCoursework

basic_io.R
A simple script illustrating R input-output.

control_flow.R
A script includes several control flow tools in R.

break.R
Using break to stop the loop execution.

boilerplate.R
Illustrates how R function accepts "arguments" and "return values.

TreeHeight.R
A function calculates tree heights given distance of each tree from its base and angle to its top.

TreeHeightm.R
A script using TreeHeight function to create a csv output file containing the calculated tree heights along with the original data.

next.R
Checks if a number in 1~10 is odd using the "modulo" operation and prints it if it is.

Vectorize1.R
A script sums all elements of a matrix and sees how much time the code takes ran by loop and by inbuilt function.

apply1.R
Using function apply to calculate the mean or variance of rows or columns of a matrix.

apply2.R
Using function apply to with a function named SomeOperation.

sample.R
Sampling a size from a population and using sapply and lapply to illustrate vectorization.

Ricker.R
A simulation of the Ricker model.

Vectorize2.R
A function vectorizes the stochastic Ricker Eqn.

TAutoCorr.R
A script testing the correlation between temperatures of one year with the next year (successive years) across years in a given location.

autocorrelation.Rnw and autocorrelation.tex
Use Sweave to produce pdf.


DataWrang.R
Using reshape2 for wrangling dataset.

DataWrangTidy.R
Using dplyr and tidyr instead of reshape2 for wrangling dataset.

PP_Lattice.R
A script produces figures and calculate the mean and median predator mass, prey mass and predator-prey size-ratios to a csv file.

Girko.R
Plotting Girko's law simulation.

MyBars.R
Annotating a plot.

plotLin.R
Mathematical annotation on a axis in the plot area.

PP_Regress.R
Saving pdf with required figure and results.
**********************************************************************

Found following files in results directory: TreeHts.csv, PP_Results.csv, MyData.csv...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 25 code files: PP_Regress.R, apply1.R, sample.R, trypopn.R, control_flow.R, boilerplate.R, TreeHeight.R, PP_Lattice.R, next.R, Ricker.R, Girko.R, Vectorize1.R, break.R, plotLin.R, basic_io.R, apply2.R, TAutoCorr.R, Vectorize2.R, Stochastic.R, DataWrangTidy.R, preallocate.R, TreeHeightm.R, DataWrang.R, MyBars.R, autocorrelation.tex

Found the following extra files: autocorrelation.Rnw, MyResults.Rout
0.5 pt deducted per extra file

Current Points = 99.0

======================================================================
Testing script/code files...

======================================================================
Inspecting script file PP_Regress.R...

File contents are:
**********************************************************************
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
library(lattice)
library(ggplot2)
require(lattice)
require(ggplot2)
p <- ggplot(MyDF, aes(x = Prey.mass, y = Predator.mass, colour = Predator.lifestage)) + geom_point(size=I(2), shape=I(3)) + theme_bw() + facet_grid(Type.of.feeding.interaction ~ .)
p <- p + labs(x = "Prey Mass in grams", y = "Predator mass in grams") + theme(legend.position="bottom")

pdf("../results/PP_Regress.pdf")
p
dev.off()


**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Code ran without errors

Time consumed = 2.89762s

======================================================================
Inspecting script file apply1.R...

File contents are:
**********************************************************************
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 

**********************************************************************
 [1] -0.174790198  0.271491585 -0.617998267  0.405763678 -0.352417600
 [6]  0.193933164 -0.009687379  0.295568372  0.240572330  0.196142260
 [1] 0.1075283 1.0868908 0.9256154 0.4721982 0.9881701 0.8705183 0.5757948
 [8] 0.5864639 0.7732561 0.9266691
 [1] -0.06333890  0.14466209 -0.05570434 -0.07461273  0.14272424  0.13787027
 [7]  0.14963897  0.08640158 -0.18493182  0.16586858

**********************************************************************

Code ran without errors

Time consumed = 0.09243s

======================================================================
Inspecting script file sample.R...

File contents are:
**********************************************************************
######### Functions #########

## A function to take a smaple of size n from a population "popn" and return its mean
myexperiment <- function(popn,n){
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}

## Calculate means using a for loop without preallocation:
loopy_sample1 <- function(popn, n, num){
    result1 <- vector() #Initialize empty vector of size 1
    for(i in 1:num){
            result1 <- c(result1, myexperiment(popn, n))
    }
    return(result1)
}

## To run "num" iterations of the experiment using a for loop on vector with preallocation:
loopy_sample2 <- function(popn, n, num){
    result2 <- vector(,num) #Preallocate expected size
    for(i in 1:num){
        result2[i] <- myexperiment(popn, n)
    }
    return(result2)
}

## To run "num" iterations of the experiment using a for loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num){
    result3 <- vector("list", num) #Preallocate expected size
    for(i in 1:num){
            result3[[i]] <- myexperiment(popn, n)
    }
    return(result3)
}

## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num){
    result4 <- lapply(1:num, function(i) myexperiment(popn, n))
    return(result4)
}

## To run "num" iterations of the experiment using vectorization with lapply:
sapply_sample <- function(popn, n, num){
    result5 <- sapply(1:num, function(i) myexperiment(popn, n))
    return(result5)
}

popn <- rnorm(1000) # Generate the population
hist(popn)

n <- 20 # sample size
num <- 1000 #Number of times to rerun the experiment

print("The loopy, non-preallocation approach takes:" )
print(system.time(loopy_sample1(popn, n, num)))

print("The loopy, but with preallocation approach takes:" )
print(system.time(loopy_sample2(popn, n, num)))

print("The loopy, non-preallocation approach takes:" )
print(system.time(loopy_sample3(popn, n, num)))

print("The vectorized sapply approach takes:" )
print(system.time(sapply_sample(popn, n, num)))

print("The vectorized lapply approach takes:" )
print(system.time(lapply_sample(popn, n, num)))
**********************************************************************

Testing sample.R...

Output (only first 500 characters): 

**********************************************************************
[1] "The loopy, non-preallocation approach takes:"
   user  system elapsed 
  0.048   0.000   0.049 
[1] "The loopy, but with preallocation approach takes:"
   user  system elapsed 
  0.024   0.000   0.021 
[1] "The loopy, non-preallocation approach takes:"
   user  system elapsed 
  0.024   0.000   0.024 
[1] "The vectorized sapply approach takes:"
   user  system elapsed 
  0.016   0.000   0.015 
[1] "The vectorized lapply approach takes:"
   user  system elapsed 
  0.020   0.000   0.019 

**********************************************************************

Code ran without errors

Time consumed = 0.39625s

======================================================================
Inspecting script file trypopn.R...

File contents are:
**********************************************************************
doit <- function(x){
        temp_x <- sample(popn, replace = TRUE)
        if(length(unique(temp_x)) > 30){
            print(paste("Mean of this sample was:", as.character(mean(temp_x))))
        }
    else {stop("Couldn't calculate mean: too few unique value!")
    }
        
}**********************************************************************

Testing trypopn.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.11466s

======================================================================
Inspecting script file control_flow.R...

File contents are:
**********************************************************************
## If statment
a <- TRUE
if (a == TRUE){
    print ("a is TRUE")
    } else {
        print ("a is FALSE")
}

## If statement on a single line
z <- runif(1) ## uniformly distributed random number
if (z <= 0.5) {print ("Less than a half")}

## For loop using a sequence
for (i in 1:10){
    j <- i * i 
    print(paste(i, " squared is" , j ))
}

## For loop over vector of strings
for(species in c('Heliodoxa rubinoides',
                'Boissonneaua jardini',
                'Sula nebouxii')){
    print(paste('The species is', species))
}

## For loop using a vector
v1 <- c("a","bc","def")
for (i in v1){
        print(i)
}

## While loop
i <- 0
while (i<10){
        i <- i+1
        print(i^2)
}**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 

**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.13593s

======================================================================
Inspecting script file boilerplate.R...

File contents are:
**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2){

    # Statments involving Arg1, Arg2:
    print(paste("Argument", as.character(Arg1), "is a", class(Arg1)))
    print(paste("Argument", as.character(Arg2), "is a", class(Arg2)))

    return (c(Arg1, Arg2)) #Optional but useful
}

MyFunction(1,2) # Test the function
MyFunction("Riki","Tiki") # A diff. test**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.12501s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:
**********************************************************************
# This function calculates heights of trees given distance of each tree
# from its bas and angle to its top, using the trigometric formula
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees: The andgle of elevation of tree
# distance: The distance from base of tree (e.g., meters)

# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance){
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    print(paste("Tree height is:", height))

    return (height)
}

TreeHeight(37,40)**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Tree height is: 30.1421620041118"
[1] 30.14216

**********************************************************************

Code ran without errors

Time consumed = 0.07614s

======================================================================
Inspecting script file PP_Lattice.R...

File contents are:
**********************************************************************
# Import data
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF)
require(dplyr)
require(tidyr)
dplyr::glimpse(MyDF)

# Make lattice graphs and save as pdf
require(lattice)


pdf("../results/Pred_Lattice.pdf", 11.6, 8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off()

pdf("../results/Prey_Lattice.pdf", 11.6, 8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off()

pdf("../results/SizeRatio_Lattice.pdf", 11.6, 8.3)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
graphics.off()

# Calculate mean and median and save as .csv
PredMM <- MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Pred.mean = mean(log(Predator.mass)), Pred.median = median(log(Predator.mass)))
PreyMM <- MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Prey.mean = mean(log(Prey.mass)), Prey.median = median(log(Prey.mass)))
SizeRatioMM <- MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(SizeRatio.mean = mean(log(Prey.mass/Predator.mass)), SizeRatio.median = median(log(Prey.mass/Predator.mass)))
PP_Results <- cbind(PredMM, PreyMM[,2:3], SizeRatioMM[,2:3])
write.csv(PP_Results,"../results/PP_Results.csv")**********************************************************************

Testing PP_Lattice.R...

Output (only first 500 characters): 

**********************************************************************
[1] 34931    15
Observations: 34,931
Variables: 15
$ Record.number               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13…
$ In.refID                    <fct> ATSH063, ATSH080, ATSH089, ATSH143, ATSH1…
$ IndividualID                <fct> 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12,…
$ Predator                    <fct> Rhizoprionodon terraenovae, Rhizoprionodo…
$ Predator.common.name        <fct> Atlantic sharpnose shark, Atlantic sharpn…
$ Predator.taxon              <fct> ectotherm vertebrat
**********************************************************************

Encountered error (or warning):
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: tidyr
Loading required package: lattice

======================================================================
Inspecting script file next.R...

File contents are:
**********************************************************************
for (i in 1:10) {
    if ((i %% 2) == 0)
        next # pass to next iteration of loop
    print(i)
}**********************************************************************

Testing next.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.08835s

======================================================================
Inspecting script file Ricker.R...

File contents are:
**********************************************************************
Ricker <- function(N0=1, r=1, K=10, generations=50)
{
    # Runs a sumilation of the Ricker model
    # Returns a vector of length generations

    N <- rep(NA, generations)  # Creates a vector of NA

    N[1] <- N0
    for (t in 2:generations)
    {
        N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K)))
    }
    return (N)
}

plot(Ricker(generations=10), type = "l")**********************************************************************

Testing Ricker.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.14632s

======================================================================
Inspecting script file Girko.R...

File contents are:
**********************************************************************
require(reshape2)
require(ggplot2)


# Plotting Girko's law simulation
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}

N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns

# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))

require(lattice)
pdf("../results/Girko.pdf")
p
graphics.off()**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Loading required package: reshape2
Loading required package: ggplot2
Loading required package: lattice

======================================================================
Inspecting script file Vectorize1.R...

File contents are:
**********************************************************************
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M){
    Dimensions <- dim(M)
    Tot <- 0
    for (i in 1:Dimensions[1]){
        for (j in 1:Dimensions[2]){
            Tot <- Tot + M[i,j]
        }
    }
    return (Tot)
}

print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.104   0.000   0.103 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.004   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.27164s

======================================================================
Inspecting script file break.R...

File contents are:
**********************************************************************
i <- 0 #Initialize i
        while(i < Inf) {
                if (i == 10) {
                    break
                } # Break out of the while loop!
                    else{
                            cat("i equals " , i ," \n")
                            i <- i + 1 #Update i
            }
}**********************************************************************

Testing break.R...

Output (only first 500 characters): 

**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  

**********************************************************************

Code ran without errors

Time consumed = 0.08754s

======================================================================
Inspecting script file plotLin.R...

File contents are:
**********************************************************************
require(lattice)
require(ggplot2)

x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
             ) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                       parse = TRUE, size = 6, 
                       colour = "blue")

p


pdf("../results/MyLinReg.pdf")
p
graphics.off()**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Loading required package: lattice
Loading required package: ggplot2

======================================================================
Inspecting script file basic_io.R...

File contents are:
**********************************************************************
# A simple script to illustrate R input-output.
# Run line by line and check inputs outputs to understand what is happening

MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append = TRUE)

write.csv(MyData, "../results/MyData.csv", row.names = TRUE)

write.table(MyData,"../results/MyData.csv", col.names = FALSE)**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Warning message:
In write.table(MyData[1, ], file = "../results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file apply2.R...

File contents are:
**********************************************************************
SomeOperation <- function(v){ # (What does this function do?)
    if(sum(v) > 0){
        return (v * 100)
    }
    return(v)
    }

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 

**********************************************************************
            [,1]        [,2]        [,3]       [,4]       [,5]       [,6]
 [1,] -0.8706156  85.3868152 -1.42092465  0.2528943  0.2912062 -1.2317816
 [2,] -1.6790243 -57.6737854 -0.39367577 -0.7102826  0.8377510 -1.4526309
 [3,] -0.3567011 141.2797945  1.03138698 -1.5063009 -0.6289298 -0.7919822
 [4,] -0.3649451 114.3429908  0.94149253  0.5710921  0.4921966  1.3799972
 [5,] -1.9730458  60.3204604 -1.18592109 -0.9431090 -0.1682619 -1.0153932
 [6,] -1.3628701 119.9141338 -1.49300306  0.4578291  0.26
**********************************************************************

Code ran without errors

Time consumed = 0.10489s

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:
**********************************************************************
# load, examine and plot Rdata
load("../data/KeyWestAnnualMeanTemperature.RData") 
ls()
plot(ats, xlab = "Years", ylab ="Temperature")

# plot the pattern of autocorrelation
plot(ats$Temp[-100], ats$Temp[-1], xlab = "Temp(t)", ylab = "Temp(t-1)")
abline(lm(ats$Temp[-100] ~ ats$Temp[-1])) # add regression line
# Correlation of temperature between successive years.
Autocorr <- cor(ats$Temp[-100],ats$Temp[-1])
# Autocorrelation plot of the data.
AutoCorrelation <- acf(ats$Temp, plot = FALSE)
plot(AutoCorrelation, main = "Key West Temperature Series ACF")


# Randomly permuting the time series and recalculating the correlation coefficient for each randomly permuted year sequence.
# Repeat the calculation 10000 times.
T_sample <- sample(ats$Temp, 100, replace = FALSE)
for (i in 10000){
    cor_sample <- cor(T_sample[-100], T_sample[-1])
}

# Plot random sample
plot(ats, xlab = "Years", ylab ="Temperature")
abline(lm(T_sample[-100] ~ T_sample[-1]))

# Plot acf
Randomsample <- acf(T_sample, plot = FALSE)
plot(Randomsample, main = "Random Temperature Series ACF")

print(paste("Correlation coefficient of temperature between successive years is", Autocorr))
print(paste("Correlation coefficient of temperature of random observation is", cor_sample))
print(paste("P_value =", (cor_sample-Autocorr)/Autocorr))**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 

**********************************************************************
[1] "ats"
[1] "Correlation coefficient of temperature between successive years is 0.326169651060742"
[1] "Correlation coefficient of temperature of random observation is -0.183859775605222"
[1] "P_value = -1.56369369439274"

**********************************************************************

Code ran without errors

Time consumed = 0.15265s

======================================================================
Inspecting script file Vectorize2.R...

File contents are:
**********************************************************************
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .

rm(list=ls())

stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0
  
  for (pop in 1:length(p0)){ #loop through the populations
  
    for (yr in 2:numyears){ #for each pop, loop through the years
    
      N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma)) #fluctuated within years
    }
  }
 return(N)

}

# Now write another function called stochrickvect that vectorizes the above 
# to the extent possible, with improved performance: 



# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))

**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.07601s

======================================================================
Inspecting script file Stochastic.R...

File contents are:
**********************************************************************
rm(list=ls())

stochrick<-function(pop,r=1.2,K=1,sigma=0.2,numyears=100){

  N[numyears,pop] <- N[numyears-1,pop]*exp(r*(1-N[numyears-1,pop]/K)+rnorm(1,0,sigma)) #fluctuated within years
    
 return(N)

}

p0 = runif(1000,.5,1.5)
numyears=100
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0

stochrickvect <- function(p0=runif(1000,.5,1.5), r=1.2,K=1, numyears=100){
    res2 <- lapply((1:length(p0)), function(i) lapply((2:numyears), function(j) stochrick()))
    return(res2)
}



print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))


**********************************************************************

Testing Stochastic.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Vectorized Stochastic Ricker takes:"

**********************************************************************

Code ran without errors

Time consumed = 10.50980s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:
**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################
#Packages utlized
install.packages("tidyr")
library(dplyr)
library(tidyr)
library(utils)
require(dplyr)
require(tidyr)
require(utils)


############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
dplyr::tbl_df(MyData)
dim(MyData)
dplyr::glimpse(MyWrangledData) #like str()
utils::View(MyWrangledData) #same as fix()

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData %>% replace_na(0)

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
#Starts from -1 because deleting the column name
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
?gather #check out the gather function

# gather() instead of melt()
MyWrangledData <- gather(TempData, Species, Count, -Cultivation, -Block, -Plot, -Quadrat)

# Using mutate in dplyr to convert multiple columns
MyWrangledData <- MyWrangledData %>% mutate_at(c("Cultivation","Block","Plot","Quadrat"), as.factor)
MyWrangledData <- MyWrangledData %>% mutate(Count=as.integer(Count))

dplyr::glimpse(MyWrangledData) #like str()
dplyr::tbl_df(MyWrangledData) #like head()


############# Exploring the data (extend the script below)  ###############
**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Installing package into ‘/usr/local/lib/R/site-library’
(as ‘lib’ is unspecified)
Warning in install.packages("tidyr") :
  'lib = "/usr/local/lib/R/site-library"' is not writable
Error in install.packages("tidyr") : unable to install packages
Execution halted

======================================================================
Inspecting script file preallocate.R...

File contents are:
**********************************************************************
a <- NA
for (i in 1:10) {
  a <- c(a, i)
  print(a)
  print(object.size(a))
}

a <- rep(NA,10)

for (i in 1:10){
  a[i] <- i
  print(a)
  print(object.size(a))
}
**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 

**********************************************************************
[1] NA  1
48 bytes
[1] NA  1  2
56 bytes
[1] NA  1  2  3
56 bytes
[1] NA  1  2  3  4
72 bytes
[1] NA  1  2  3  4  5
72 bytes
[1] NA  1  2  3  4  5  6
72 bytes
[1] NA  1  2  3  4  5  6  7
72 bytes
[1] NA  1  2  3  4  5  6  7  8
88 bytes
 [1] NA  1  2  3  4  5  6  7  8  9
88 bytes
 [1] NA  1  2  3  4  5  6  7  8  9 10
88 bytes
 [1]  1 NA NA NA NA NA NA NA NA NA
88 bytes
 [1]  1  2 NA NA NA NA NA NA NA NA
88 bytes
 [1]  1  2  3 NA NA NA NA NA NA NA
88 bytes
 [1]  1  2  3  4 NA NA NA NA NA NA
88 byte
**********************************************************************

Code ran without errors

Time consumed = 0.10054s

======================================================================
Inspecting script file TreeHeightm.R...

File contents are:
**********************************************************************
# This function calculates heights of trees given distance of each tree
# from its bas and angle to its top, using the trigometric formula
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees: The andgle of elevation of tree
# distance: The distance from base of tree (e.g., meters)

# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance){
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    

    return (height)
}

TreeData <- read.csv("../data/Trees.csv")

TreeData$Tree.Height.m <- TreeHeight(TreeData$Angle.degrees, TreeData$Distance.m)

write.csv(TreeData, file = "../results/TreeHts.csv",row.names=FALSE)
**********************************************************************

Testing TreeHeightm.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../data/Trees.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file DataWrang.R...

File contents are:
**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F)) 

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
#Starts from -1 because deleting the column name
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############
**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 

**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00488s

======================================================================
Inspecting script file MyBars.R...

File contents are:
**********************************************************************
require(ggplot2)

a <- read.table("../data/Results.txt", header = TRUE)

head(a)

a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
                          x = x,
                          ymin = ymin,
                          ymax = y1,
                          size = (0.5)
                          ),
                        colour = "#E69F00",
                        alpha = 1/2, show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
                          x = x,
                          ymin = ymin,
                          ymax = y2,
                          size = (0.5)
                          ),
                        colour = "#56B4E9",
                        alpha = 1/2, show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
                          x = x,
                          ymin = ymin,
                          ymax = y3,
                          size = (0.5)
                          ),
                        colour = "#D55E00",
                        alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
                            scale_y_continuous("My y axis") + 
                            theme_bw() + 
                            theme(legend.position = "none") 
p

pdf("../results/MyBars.pdf")
p
graphics.off()**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 

**********************************************************************
         x   y1   y2 y3 Label
1 3.515424 4320 4320  0  <NA>
2 3.533984 2160 2160  0  <NA>
3 3.557647 4320 4320  0  <NA>
4 3.569953 4320 4320  0  <NA>
5 3.578984 8640 8640  0  <NA>
6 3.585665 2160 2160  0  <NA>

**********************************************************************

Encountered error (or warning):
Loading required package: ggplot2
Warning message:
Removed 91 rows containing missing values (geom_text). 
Warning message:
Removed 91 rows containing missing values (geom_text). 

======================================================================
Inspecting script file autocorrelation.tex...

File contents are:
**********************************************************************
\documentclass[a4paper]{article}
\usepackage{Sweave}


\title{Results and Discussion: Autocorrelation in weather}
\author{Yuqing Zhou}
\date{23 Oct 2019}

\begin{document}
 \maketitle



\section{Results}
Correlation coefficient of temperature between successive years is 
\begin{Schunk}
\begin{Soutput}
[1] 0.3261697
\end{Soutput}
\end{Schunk}
Correlation coefficient of temperature of random observation is 
\begin{Schunk}
\begin{Soutput}
[1] -0.1247
\end{Soutput}
\end{Schunk}
P value is 
\begin{Schunk}
\begin{Soutput}
[1] -1.382316
\end{Soutput}
\end{Schunk}
The plots are also included:

\begin{center}
\includegraphics{autocorrelation-005}
\end{center}

\begin{center}
\includegraphics{autocorrelation-006}
\end{center}

\section{Discussion}
The autocorrelation plot for temperatures of successive years shows a moderate positive autocorrelation. The gradually decreasing autocorrelation is generally linear with noises. The autocorrelation plot for random samples illustrates that there is no significant autocorrelation. Therefore, temperatures of one year are more correlated with the successive years than with random observations.



\end{document}
**********************************************************************

Testing autocorrelation.tex...

======================================================================
======================================================================
Finished running scripts

Ran into 7 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!